# Copyright 2016 Peter Dimov
# Copyright 2017, 2018 James E. King III
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://boost.org/LICENSE_1_0.txt)

#
# Generic Travis CI build script for boostorg repositories
#
# Instructions for customizing this script for your library:
# 
# 1. Customize the compilers and language levels you want in the 'jobs'.
# 2. If you have more than include/, src/, test/, example/, examples/, or
#    tools/ directories, modify your Travis CI project and add the environment
#    variable DEPINST.  For example if your build uses code in "bench/" and
#    "fog/" directories, then set DEPINST to the following:
#        --include bench --include fog
# 3. If you want to enable Coverity Scan, you need to provide the environment
#    variables COVERITY_SCAN_TOKEN and COVERITY_SCAN_NOTIFICATION_EMAIL in
#    your github settings.
# 4. Enable pull request builds in your boostorg/<library> account.
#
# That's it - the scripts will do everything else for you.

sudo: false
dist: trusty
language: cpp

env:
  global:
  # see: http://www.boost.org/build/doc/html/bbv2/overview/invocation.html#bbv2.overview.invocation.properties
  # to use the default for a given environment, comment it out; recommend you build debug and release however..
  # - B2_ADDRESS_MODEL=address-model=64,32
  # - B2_LINK=link=shared,static
  # - B2_THREADING=threading=multi,single
    - B2_VARIANT=variant=release,debug

install:
  - git clone https://github.com/jeking3/boost-ci.git boost-ci
  - cp -pr boost-ci/ci boost-ci/.codecov.yml .
  - export SELF=`basename $TRAVIS_BUILD_DIR`
  - cd ..
  - |
    # Determining the root branch
    if [[ "$TRAVIS_PULL_REQUEST" == "false" ]]; then
      export BRANCH=$TRAVIS_BRANCH
    else
      # It is a pull request. Retrieve the base branch from GitHub
      GH_PR_API=https://api.github.com/repos/$TRAVIS_REPO_SLUG/pulls/$TRAVIS_PULL_REQUEST
      export BRANCH=`curl -s $GH_PR_API | jq -r .head.ref`;
    fi
    if [[ ! "$BRANCH" =~ ^(master|develop)$ ]]; then
      # Travis has been triggered not from our main branches.
      # Find out the base branch from the git history
      # TODO: Not implemented yet, but in most cases it will be develop branch
      export BRANCH=develop
    fi
    echo Root branch is $BRANCH
  - git clone -b $BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
  - cd boost-root
  - git submodule update -q --init tools/boostdep
  - git submodule update -q --init tools/build
  - git submodule update -q --init tools/inspect
  - cp -r $TRAVIS_BUILD_DIR/* libs/$SELF
  - export BOOST_ROOT="`pwd`"
  - export PATH="`pwd`":$PATH
  - python tools/boostdep/depinst/depinst.py --include benchmark --include example --include examples --include tools $DEPINST $SELF
  - ./bootstrap.sh
  - ./b2 headers

addons:
  apt:
    packages:
      - binutils-gold
      - gdb
      - libc6-dbg
    
script:
  - cd $BOOST_ROOT/libs/$SELF
  - ci/travis/build.sh

#
# Default toolsets in Ubuntu
#
#       trusty xenial bionic
#        14.04  16.04  18.04
#       ------ ------ ------
# clang    3.4    3.8    6.0
#   gcc  4.8.2  5.3.1  7.3.0
#

anchors:
  clang-34: &clang-34 { apt: { packages: [ "clang-3.4" ], sources: [ "llvm-toolchain-trusty-3.4" ] } }
  clang-38: &clang-38 { apt: { packages: [ "clang-3.8" ], sources: [ "llvm-toolchain-trusty-3.8" ] } }
  clang-4:  &clang-4  { apt: { packages: [ "clang-4.0" ], sources: [ "llvm-toolchain-trusty-4.0" ] } }
  clang-5:  &clang-5  { apt: { packages: [ "clang-5.0" ], sources: [ "llvm-toolchain-trusty-5.0" ] } }
  clang-6:  &clang-6  { apt: { packages: [ "clang-6.0",
                                           "libstdc++-7-dev",
                                           "valgrind"  ], sources: [ "llvm-toolchain-trusty-6.0",
                                                                     "ubuntu-toolchain-r-test"   ] } }
  clang-7:  &clang-7  { apt: { packages: [ "clang-7",
                                           "libc++-7-dev",
                                           "libc++abi-7-dev" 
                                                       ], sources: [ "llvm-toolchain-trusty-7",
                                                                     "ubuntu-toolchain-r-test"   ] } }
  gcc-44:   &gcc-44   { apt: { packages: [ "g++-4.4"   ], sources: [ "ubuntu-toolchain-r-test"   ] } }
  gcc-46:   &gcc-46   { apt: { packages: [ "g++-4.6"   ], sources: [ "ubuntu-toolchain-r-test"   ] } }
  gcc-48:   &gcc-48   { apt: { packages: [ "g++-4.8"   ], sources: [ "ubuntu-toolchain-r-test"   ] } }
  gcc-5:    &gcc-5    { apt: { packages: [ "g++-5"     ], sources: [ "ubuntu-toolchain-r-test"   ] } }
  gcc-6:    &gcc-6    { apt: { packages: [ "g++-6"     ], sources: [ "ubuntu-toolchain-r-test"   ] } }
  gcc-7:    &gcc-7    { apt: { packages: [ "g++-7"     ], sources: [ "ubuntu-toolchain-r-test"   ] } }
  gcc-8:    &gcc-8    { apt: { packages: [ "g++-8"     ], sources: [ "ubuntu-toolchain-r-test"   ] } }

jobs:
  include:
    - os: linux
      env:
        - COMMENT=ubsan
        - B2_VARIANT=variant=debug
        - TOOLSET=gcc-8
        - CXXSTD=03,11,17
        - CXXFLAGS="cxxflags=-fno-omit-frame-pointer cxxflags=-fsanitize=undefined cxxflags=-fno-sanitize-recover=undefined"
        - LINKFLAGS="linkflags=-fsanitize=undefined linkflags=-fno-sanitize-recover=undefined linkflags=-fuse-ld=gold"
        - UBSAN_OPTIONS=print_stacktrace=1
      addons: *gcc-8

    - os: linux
      env:
        - COMMENT=ubsan
        - B2_VARIANT=variant=debug
        - TOOLSET=clang-6
        - CXXSTD=03,11,17
        - CXXFLAGS="cxxflags=-fno-omit-frame-pointer cxxflags=-fsanitize=undefined cxxflags=-fno-sanitize-recover=undefined"
        - LINKFLAGS="linkflags=-fsanitize=undefined linkflags=-fno-sanitize-recover=undefined"
        - UBSAN_OPTIONS=print_stacktrace=1
      addons: *clang-6


    - os: linux
      env:
        - COMMENT=ubsan
        - B2_VARIANT=variant=debug
        - TOOLSET=clang-7
        - CXXSTD=03,11,17
        - CXXFLAGS="cxxflags=-fno-omit-frame-pointer cxxflags=-fsanitize=undefined cxxflags=-fno-sanitize-recover=undefined"
        - LINKFLAGS="linkflags=-fsanitize=undefined linkflags=-fno-sanitize-recover=undefined"
        - UBSAN_OPTIONS=print_stacktrace=1
      addons: *clang-7

notifications:
  email:
    false

